% erlang option to compile modules with debug info in them
% see http://erlang.org/doc/man/compile.html for details

{erl_opts, [debug_info]}.

% add riak_ensemble_ng package version 2.4.0 as dependency from hex.pm
% the package name is riak_ensemble_ng but the project is called riak_ensemble
% see https://hex.pm/packages/riak_ensemble_ng for details

{deps, [{riak_ensemble, "2.4.0", {pkg, riak_ensemble_ng}}]}.

% add configuration for the relase, rebar3 uses relx to create releases
% see https://github.com/erlware/relx for details

{relx, [
    % our release is for the project named "cadena" version 0.1.0
    {release, {cadena, "0.1.0"},
         [
          % we want to include in the release cadena itself
          cadena,
          % and riak_ensemble, but we don't want to start it automatically
          % when our project starts, so we add the load option so it's
          % loaded even when it's not in the application list in the .app file
          {riak_ensemble, load}]},

        % by default we want to do a dev build, for more details see
        % https://www.rebar3.org/v3/docs/releases

        {dev_mode, true},

        % in this build we don't what to include the erlang runtime system
        % it will use one from the environment it runs on instead
        {include_erts, false},

        % specify a file to go look for variables to use as replacements in
        % template files during release creation
        {overlay_vars, "config/vars.config"}
       ]}.

% a profile is a set of configuration settings to be used only in a specific
% contexts, overriding or complementing the regular configuration
% we use it so we can make more than one release that can run on the same
% computer, for that we need to change the node name, ip address and ports
% associated with each node so that they don't collide when run together,
% in this way we can run a cluster on a single machine.

{profiles, [
    % the prod profile will be used to create a production release of the
    % project, here we override some configs from the base release config
    % (the one in the relx section above)
    {prod, [{relx, [
        % we are not in dev_mode here, this is a production release
        {dev_mode, false},

        % we want to include the erlang runtime system for this release so
        % that we don't depend on the operating system where we deploy to
        % provide erlang for us and to be sure which erlang version runs our
        % release
        {include_erts, true}]}]},

    % now we define 3 profiles that are quite similar: node1, node2 and node3
    % this profiles only override the fields in vars.config that need to be
    % changed to avoid clashes when we run more than one node on the same computer

    % this is not needed if you run a dev or prod release on 3 different computers
    % or on containers, because each can use the same ports (but still need
    % a different node name)

    {node1, [{relx, [
        % we define two overlay vars, vars.config first and then vars_node1.config
        % all cars common to the three profiles are in vars.config for reause
        % we "overlay" (override) the vars that must be different in
        % vars_node1.config
        {overlay_vars, ["config/vars.config", "config/vars_node1.config"]}]}]},

    % the same as node1 but use vars_node2.config instead
    {node2, [{relx,
         [{overlay_vars, ["config/vars.config", "config/vars_node2.config"]}]}]},

    % the same as node1 but use vars_node3.config instead
    {node3, [{relx,
         [{overlay_vars, ["config/vars.config", "config/vars_node3.config"]}]}]}]}.

% we add a project plugin to our project, in this case rebar3_cuttlefish,
% which generates a human readable/editable config file and validation logic
% from a configuration schema
% check https://github.com/tsloughter/rebar3_cuttlefish and
% https://github.com/basho/cuttlefish for more information

{project_plugins, [rebar3_cuttlefish]}.
